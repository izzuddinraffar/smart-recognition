{"version":3,"sources":["components/FaceRecognition/FaceRecognition.js","components/InputForm/InputForm.js","App.js","serviceWorker.js","index.js"],"names":["FaceRecognition","props","items","box","react_default","a","createElement","className","style","display","justifyContent","id","alt","src","imageURL","width","heigh","map","i","key","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","InputForm","onChange","change","placeholder","type","onClick","click","app","Clarifai","App","apiKey","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","calculateFaceLocation","clarifaiFace","image","document","getElementById","Number","height","left_col","top_row","right_col","bottom_row","displayFaceBox","setState","onChangeImg","event","input","target","value","onSubmitImg","state","models","predict","FACE_DETECT_MODEL","then","response","arr","outputs","data","regions","item","push","region_info","bounding_box","catch","err","console","log","components_InputForm_InputForm","components_FaceRecognition_FaceRecognition","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.abd65654.chunk.js","sourcesContent":["import React from 'react';\r\nimport './FaceRecognition.css'\r\n\r\n\r\nconst FaceRecognition = (props) => {\r\n    const items = props.box;\r\n    \r\n    return (\r\n        <div className='center ma' style={{display:'flex', justifyContent:'center'}}>\r\n            <div className='absolute mt2'>\r\n                <img id='inputImage' alt='' src={props.imageURL} width='500px' heigh='auto' />\r\n                {\r\n                     items.map((box, i) => {\r\n                        return (\r\n                          <div key={i} style={{top: box.topRow, right: box.rightCol, bottom: box.bottomRow, left: box.leftCol}} className='bounding-box'></div>\r\n                        );\r\n                     })\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FaceRecognition;","import React from 'react';\r\n\r\nconst InputForm = (props) =>{\r\n    return (\r\n        <div>\r\n      <p className='f3'>\r\n        {'Face Recognition App.'}\r\n      </p>\r\n      <div className='center'>\r\n        <div className='form center pa4 br3 shadow-5'>\r\n          <input onChange={props.change} placeholder=\"insert url image\" className='f4 pa2 w-70 center' type='text'/>\r\n          <button onClick={props.click}\r\n            className='w-30 grow f4 link ph3 pv2 dib white bg-light-purple'\r\n          >Detect</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    );\r\n}\r\n\r\nexport default InputForm;","import React, { Component } from 'react';\nimport Clarifai from 'clarifai';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport InputForm from './components/InputForm/InputForm';\nimport './App.css';\n\nconst app = new Clarifai.App({\n  apiKey: '758daddddcc147a5b9ef5daca35954e2'\n });\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      input : '',\n      imageURL : '',\n      box : []\n    }\n  }\n\n  componentDidMount(){\n    this.state.input = 'http://1077thejewel.com/wp-content/uploads/Confident-People-Happy-Group.jpg';\n    this.state.imageURL = this.state.input;\n    this.onSubmitImg();\n  }\n\n  calculateFaceLocation = (clarifaiFace) => {\n    const image = document.getElementById('inputImage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    return {\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - (clarifaiFace.right_col * width),\n      bottomRow: height - (clarifaiFace.bottom_row * height)\n    }\n  }\n\n  displayFaceBox = (box) => {\n    this.setState({box: box});\n  }\n\n  onChangeImg = (event) => {\n    this.setState({input:event.target.value});\n  }\n  onSubmitImg = () => {\n    this.setState({imageURL:this.state.input});\n    app.models\n    .predict(\n      Clarifai.FACE_DETECT_MODEL,\n      this.state.input)\n    .then(response => {\n      //data.outputs[0].data.regions[index].region_info.bounding_box;\n      const arr = [];\n      response.outputs[0].data.regions.map((item, i) => {\n        return arr.push(this.calculateFaceLocation(item.region_info.bounding_box));\n      })\n      this.displayFaceBox(arr);\n    })\n    .catch(err => console.log(err));\n  }\n  render() {\n    const imageURL = this.state.imageURL;\n    const box = this.state.box;\n    return (\n      <div className=\"App\">\n         <InputForm change={this.onChangeImg} click={this.onSubmitImg}/>\n         <FaceRecognition box={box} imageURL={imageURL}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}